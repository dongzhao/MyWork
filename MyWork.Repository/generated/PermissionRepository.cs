


































/**
The class generated by codegen 
*/
using MyWork.Model;
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MyWork.Repository
{
    public class PermissionRepository : IPermissionRepository
    {
        protected readonly MyWorkDbContext ctx;
        public PermissionRepository(MyWorkDbContext context){
            this.ctx = context;
        }

        public void Delete(int id){
            var permission = ctx.PermissionSet.SingleOrDefault(e => e.Id == id);
            if(ctx.Entry(permission).State == EntityState.Detached){
                ctx.PermissionSet.Attach(permission);
            };
            ctx.PermissionSet.Remove(permission);
            ctx.SaveChanges();
        }

        public IEnumerable<Permission> GetAll()
        {
            return ctx.PermissionSet

            .ToList();
        }

        public Permission GetById(int id)
        {
            return ctx.PermissionSet

            .SingleOrDefault(e => e.Id == id);
        }

        public int Create(Permission permission)
        {
            ctx.PermissionSet.Add(permission);
            ctx.SaveChanges();
            return permission.Id;
        }

        public void Update(Permission permission)
        {
            ctx.PermissionSet.Attach(permission);
            ctx.Entry(permission).State = EntityState.Modified;
            ctx.SaveChanges();
        }
 
        public IEnumerable<Permission> SearchByShortName(System.String shortname)
        {
            return ctx.PermissionSet

            .Where(e => e.ShortName == shortname).ToList();            
        }                
 
        public IEnumerable<Permission> SearchByDescription(System.String description)
        {
            return ctx.PermissionSet

            .Where(e => e.Description == description).ToList();            
        }                
        
    }
}

