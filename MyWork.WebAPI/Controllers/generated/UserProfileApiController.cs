/**
The controller class generated by codegen 
*/
using MyWork.Model;
using MyWork.Repository;
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.ComponentModel.DataAnnotations;
using NLog;

namespace MyWork.WebAPI.Controllers
{
    [Route("api/v1/userprofile")]
    public class UserProfileApiController : BaseController
    {
        private readonly IUserProfileRepository userprofileRepository;
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();

        public UserProfileApiController(IUserProfileRepository rs){
            this.userprofileRepository = rs;
        }

        [HttpGet]
        [Route("getall")]
        [Display(Description = "Get All UserProfile")]
        public IHttpActionResult GetAll()
        {
            try
            {
                var results = userprofileRepository.GetAll();
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpGet]
        [Route("get/{id}")]
        [Display(Description = "Get UserProfile by id value")]
        public IHttpActionResult Get(int id)
        {
            try
            {
                var result = userprofileRepository.GetById(id);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("create")]
        [Display(Description = "create a new UserProfile")]
        public IHttpActionResult Create(UserProfile userprofile)
        {
            try
            {
                var result = userprofileRepository.Create(userprofile);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("update")]
        [Display(Description = "update existing UserProfile")]
        public IHttpActionResult Update(UserProfile userprofile)
        {
            try
            {
                userprofileRepository.Update(userprofile);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpDelete]
        [Route("delete/{id}")]
        [Display(Description = "delete existing UserProfile by id")]
        public IHttpActionResult Delete(int id)
        {
            try
            {
                userprofileRepository.Delete(id);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }        

         [HttpGet]
        [Route("query/firstname/{firstname}")]
        [Display(Description = "query UserProfile by firstname value")]
        public IHttpActionResult QueryFirstName(System.String firstname)
        {
            try
            {
                var results = userprofileRepository.SearchByFirstName(firstname);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
         [HttpGet]
        [Route("query/lastname/{lastname}")]
        [Display(Description = "query UserProfile by lastname value")]
        public IHttpActionResult QueryLastName(System.String lastname)
        {
            try
            {
                var results = userprofileRepository.SearchByLastName(lastname);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
         [HttpGet]
        [Route("query/gender/{gender}")]
        [Display(Description = "query UserProfile by gender value")]
        public IHttpActionResult QueryGender(System.Boolean gender)
        {
            try
            {
                var results = userprofileRepository.SearchByGender(gender);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
         [HttpGet]
        [Route("query/birthdate/{fromDate}/{toDate}")]
        [Display(Description = "query UserProfile by datetime")]
        public IHttpActionResult QueryBirthDate(System.DateTime fromDate, System.DateTime toDate)
        {
            try
            {
                var results = userprofileRepository.SearchByBirthDate(fromDate, toDate);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }
         [HttpGet]
        [Route("query/mobile/{mobile}")]
        [Display(Description = "query UserProfile by mobile value")]
        public IHttpActionResult QueryMobile(System.String mobile)
        {
            try
            {
                var results = userprofileRepository.SearchByMobile(mobile);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
         [HttpGet]
        [Route("query/address/{address}")]
        [Display(Description = "query UserProfile by address value")]
        public IHttpActionResult QueryAddress(System.String address)
        {
            try
            {
                var results = userprofileRepository.SearchByAddress(address);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
        
    }
}

