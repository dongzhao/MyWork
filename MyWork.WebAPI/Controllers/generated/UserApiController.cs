/**
The controller class generated by codegen 
*/
using MyWork.Model;
using MyWork.Repository;
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.ComponentModel.DataAnnotations;
using NLog;

namespace MyWork.WebAPI.Controllers
{
    [Route("api/v1/user")]
    public class UserApiController : BaseController
    {
        private readonly IUserRepository userRepository;
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();

        public UserApiController(IUserRepository rs){
            this.userRepository = rs;
        }

        [HttpGet]
        [Route("getall")]
        [Display(Description = "Get All User")]
        public IHttpActionResult GetAll()
        {
            try
            {
                var results = userRepository.GetAll();
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpGet]
        [Route("get/{id}")]
        [Display(Description = "Get User by id value")]
        public IHttpActionResult Get(int id)
        {
            try
            {
                var result = userRepository.GetById(id);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("create")]
        [Display(Description = "create a new User")]
        public IHttpActionResult Create(User user)
        {
            try
            {
                var result = userRepository.Create(user);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("update")]
        [Display(Description = "update existing User")]
        public IHttpActionResult Update(User user)
        {
            try
            {
                userRepository.Update(user);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpDelete]
        [Route("delete/{id}")]
        [Display(Description = "delete existing User by id")]
        public IHttpActionResult Delete(int id)
        {
            try
            {
                userRepository.Delete(id);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }        

         [HttpGet]
        [Route("query/username/{username}")]
        [Display(Description = "query User by username value")]
        public IHttpActionResult QueryUserName(System.String username)
        {
            try
            {
                var results = userRepository.SearchByUserName(username);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
         [HttpGet]
        [Route("query/emailaddress/{emailaddress}")]
        [Display(Description = "query User by emailaddress value")]
        public IHttpActionResult QueryEmailAddress(System.String emailaddress)
        {
            try
            {
                var results = userRepository.SearchByEmailAddress(emailaddress);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
        
    }
}

