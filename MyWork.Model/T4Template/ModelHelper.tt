<#@ template debug="true" hostspecific="true" language="C#" #>

<#@ assembly name="$(SolutionDir)MyWork.Model\bin\Debug\MyWork.Model.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#+
public string getTypeOfIdField(){
    return "int";
}

public string getSolutionUrl(){
    var serviceProvider = this.Host as IServiceProvider;
    var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    return Path.GetDirectoryName(dte.Solution.FullName);
}

public void SaveOutput(string outputFileName){
    string tempDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(tempDirectory, outputFileName);
    File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

public static string Transform(string fieldType){
    if(fieldType == typeof(String).FullName){
        return "Convert.ToString";
    }else if(fieldType.IndexOf(typeof(Boolean).FullName) >= 0){
        return "Convert.ToBoolean";
    }else if(fieldType.IndexOf(typeof(DateTime).FullName) >= 0){
        return "Convert.ToDateTime";
    }else{
        return "";
    }
}
#>