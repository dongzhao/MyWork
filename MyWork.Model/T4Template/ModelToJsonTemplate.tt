<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)MyWork.model\bin\Debug\MyWork.Model.dll" #>
<#@ assembly name="$(SolutionDir)MyWork.model\bin\Debug\MyWork.Core.dll" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="MyWork.Model" #>
<#@ import namespace="MyWork.Core" #>

<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".txt" #>
<#@ include file="ModelHelper.tt" #>
<#
    var myNameSpace = "MyWork";
    var contextName = myNameSpace + "DbContext";
    var modelPath = getSolutionUrl() + @"\" + myNameSpace + @".Model\bin\Debug\" + myNameSpace + ".Model.dll";
    var asse = Assembly.LoadFrom(modelPath);
    var typeList = asse.GetTypes();
    // beginning of looping class
    foreach(var type in typeList)
    {
        if(!typeof(ICodeGen).IsAssignableFrom(type) || type.IsAbstract || type.IsInterface || !type.IsClass){
            continue;
        }
        var className = type.Name;
        Object obj = Activator.CreateInstance(type);
        var jsonStr = JsonConvert.SerializeObject(obj);
        //var jsonStr = "";
#>
<#=jsonStr#>
<#
        SaveOutput(@"..\..\" + myNameSpace + @".Model.UnitTest\generated\json\temp\" + className + ".json");
    }
    // end of looping class
#>