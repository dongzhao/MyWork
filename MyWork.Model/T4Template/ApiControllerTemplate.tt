<#@ template debug="true" hostspecific="true" language="C#" #>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)MyWork.model\bin\Debug\MyWork.Model.dll" #>
<#@ assembly name="$(SolutionDir)MyWork.model\bin\Debug\MyWork.Core.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="MyWork.Model" #>
<#@ import namespace="MyWork.Core" #>

<#@ output extension=".cs" #>

<#@ include file="ModelHelper.tt" #>

<#
    var modelPath = getSolutionUrl() + @"\MyWork.Model\bin\Debug\MyWork.Model.dll";
    var asse = Assembly.LoadFrom(modelPath);
    var typeList = asse.GetTypes();
    var myNameSpace = "MyWork";
    var contextName = "MyWorkDbContext";
    var fieldIdType = getTypeOfIdField();
    // beginning of looping class
    foreach(var type in typeList){
        if(!typeof(ICodeGen).IsAssignableFrom(type) || type.IsAbstract || type.IsInterface || !type.IsClass){
            continue;
        }
        var className = type.Name;
        // add eager loading reference model
        var included = new List<string>();
        foreach(PropertyInfo pi in type.GetProperties()){
            var fieldName = pi.Name;
            var fieldType = pi.PropertyType.FullName;
            if(fieldType.IndexOf(myNameSpace+".Model.")>=0){
                // only look into Model namespace
                var attr = pi.GetCustomAttribute(typeof(ModelAttribute));
                if(attr != null){
                    ModelAttribute myAttr = attr as ModelAttribute;
                    if(myAttr.EagerLoading){
                        included.Add(fieldName);
                    }
                }
            }
        }
#>
/**
The controller class generated by codegen 
*/
using <#=myNameSpace#>.Model;
using <#=myNameSpace#>.Repository;
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.ComponentModel.DataAnnotations;
using NLog;

namespace <#=myNameSpace#>.WebAPI.Controllers
{
    [Route("api/v1/<#=className.ToLower()#>")]
    public class <#=className#>ApiController : BaseController
    {
        private readonly I<#=className#>Repository <#=className.ToLower()#>Repository;
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();

        public <#=className#>ApiController(I<#=className#>Repository rs){
            this.<#=className.ToLower()#>Repository = rs;
        }

        [HttpGet]
        [Route("getall")]
        [Display(Description = "Get All <#=className#>")]
        public IHttpActionResult GetAll()
        {
            try
            {
                var results = <#=className.ToLower()#>Repository.GetAll();
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpGet]
        [Route("get/{id}")]
        [Display(Description = "Get <#=className#> by id value")]
        public IHttpActionResult Get(<#=fieldIdType#> id)
        {
            try
            {
                var result = <#=className.ToLower()#>Repository.GetById(id);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("create")]
        [Display(Description = "create a new <#=className#>")]
        public IHttpActionResult Create(<#=className#> <#=className.ToLower()#>)
        {
            try
            {
                var result = <#=className.ToLower()#>Repository.Create(<#=className.ToLower()#>);
                return Json(result);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpPost]
        [Route("update")]
        [Display(Description = "update existing <#=className#>")]
        public IHttpActionResult Update(<#=className#> <#=className.ToLower()#>)
        {
            try
            {
                <#=className.ToLower()#>Repository.Update(<#=className.ToLower()#>);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }

        [HttpDelete]
        [Route("delete/{id}")]
        [Display(Description = "delete existing <#=className#> by id")]
        public IHttpActionResult Delete(<#=fieldIdType#> id)
        {
            try
            {
                <#=className.ToLower()#>Repository.Delete(id);
                return Json(HttpStatusCode.OK);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }        

 <#
        // to lool each field property for generating methods
        foreach(PropertyInfo pi in type.GetProperties()){
            var fieldName = pi.Name;
            var fieldType = pi.PropertyType.FullName;
            if(fieldType.IndexOf(myNameSpace+".Model.")>=0){
                // to skip the field from Model namespace
                continue;
            }
            // to check attribute
            var propTypeName = "";
            var attr = pi.GetCustomAttribute(typeof(ModelAttribute));
            if(attr != null){
                ModelAttribute myAttr = attr as ModelAttribute;
                if(myAttr.Searchable){
                    if(pi.PropertyType.GenericTypeArguments.Length > 0){
                        propTypeName = pi.PropertyType.GenericTypeArguments[0].FullName;
                    }else{
                        propTypeName = fieldType;
                    }
                    if(propTypeName == typeof(DateTime).FullName){
 #>
        [HttpGet]
        [Route("query/<#=fieldName.ToLower()#>/{fromDate}/{toDate}")]
        [Display(Description = "query <#=className#> by datetime")]
        public IHttpActionResult Query<#=fieldName#>(<#=propTypeName#> fromDate, <#=propTypeName#> toDate)
        {
            try
            {
                var results = <#=className.ToLower()#>Repository.SearchBy<#=fieldName#>(fromDate, toDate);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }
 <#                       
                    }else{
 #>
        [HttpGet]
        [Route("query/<#=fieldName.ToLower()#>/{<#=fieldName.ToLower()#>}")]
        [Display(Description = "query <#=className#> by <#=fieldName.ToLower()#> value")]
        public IHttpActionResult Query<#=fieldName#>(<#=propTypeName#> <#=fieldName.ToLower()#>)
        {
            try
            {
                var results = <#=className.ToLower()#>Repository.SearchBy<#=fieldName#>(<#=fieldName.ToLower()#>);
                return Json(results);
            }
            catch(Exception ex)
            {
                logger.Error(ex);
                throw new Exception(ex.StackTrace);
            }
        }             
 <#                       
                    }
                }
            }
        }

 #>       
    }
}

<#
        SaveOutput(@"..\..\" + myNameSpace +@".WebAPI\Controllers\generated\" + className + "ApiController.cs");
    }
    // end of looping class
#>